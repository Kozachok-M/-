с Python на C++
#include <iostream>
#include <vector>
using namespace std;

// Функция интерполяционного поиска
int interpolationSearch(const vector<int>& arr, int lo, int hi, int x) {
    if (lo <= hi && x >= arr[lo] && x <= arr[hi]) {
        // Вычисляем позицию с помощью интерполяционной формулы
        int pos = lo + (((hi - lo) * (x - arr[lo])) / (arr[hi] - arr[lo]));
        
        // Если цель найдена
        if (arr[pos] == x) {
            return pos;
        }
        
        // Если x больше, x находится в правом подмассиве
        if (arr[pos] < x) {
            return interpolationSearch(arr, pos + 1, hi, x);
        }
        
        // Если x меньше, x находится в левом подмассиве
        if (arr[pos] > x) {
            return interpolationSearch(arr, lo, pos - 1, x);
        }
    }
    return -1;  // Элемент не найден
}

// Обертка для удобного вызова
int interpolationSearch(const vector<int>& arr, int x) {
    return interpolationSearch(arr, 0, arr.size() - 1, x);
}

int main() {
    vector<int> arr = {10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47};
    int target = 18;
    
    int result = interpolationSearch(arr, target);
    
    if (result != -1) {
        cout << "Элемент " << target << " найден на позиции: " << result << endl;
    } else {
        cout << "Элемент " << target << " не найден" << endl;
    }
    
    return 0;
}

c python на java

public class InterpolationSearch {

    // Метод для интерполяционного поиска
    public static int interpolationSearch(int[] arr, int lo, int hi, int x) {
        if (lo <= hi && x >= arr[lo] && x <= arr[hi]) {
            // Вычисляем позицию с помощью интерполяционной формулы
            int pos = lo + (((hi - lo) * (x - arr[lo])) / (arr[hi] - arr[lo]));
            
            // Состояние, если цель найдена
            if (arr[pos] == x) {
                return pos;
            }
            
            // Если x больше, x находится в правом подмассиве
            if (arr[pos] < x) {
                return interpolationSearch(arr, pos + 1, hi, x);
            }
            
            // Если x меньше, x находится в левом подмассиве
            if (arr[pos] > x) {
                return interpolationSearch(arr, lo, pos - 1, x);
            }
        }
        return -1;  // Элемент не найден
    }

    // Перегруженный метод для удобства вызова
    public static int interpolationSearch(int[] arr, int x) {
        return interpolationSearch(arr, 0, arr.length - 1, x);
    }

    // Вспомогательный метод для вывода массива
    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }

    // Основной метод для тестирования
    public static void main(String[] args) {
        int[] sortedArray = {10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47};
        int target = 18;
        
        System.out.print("Отсортированный массив: ");
        printArray(sortedArray);
        
        int result = interpolationSearch(sortedArray, target);
        
        if (result != -1) {
            System.out.println("Элемент " + target + " найден на позиции: " + result);
        } else {
            System.out.println("Элемент " + target + " не найден");
        }
        
        // Тестирование с другим элементом
        target = 33;
        result = interpolationSearch(sortedArray, target);
        
        if (result != -1) {
            System.out.println("Элемент " + target + " найден на позиции: " + result);
        } else {
            System.out.println("Элемент " + target + " не найден");
        }
    }
}
